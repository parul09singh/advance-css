3 pillars to write good html and CSS and build good websites
- responsive design
- maintainable and scalable code
- web performance

Responsive design
- fluid layouts
- media queries
- responsive images
- correct units
- desktop-first vs mobile-first

Maintainable and scalable code
- clean
- easy to understand
- supports growth
- reusable
- how to organize files
- how to name classes
- how to structure html

Web performance
- less HTTP requests
- less code
- compress code
- use a CSS preprocessor
- less images
- compress images

What happens to CSS when we load up a webpage
            Load HTML --> Parse HTML ---------------------------------> Document Object Model(DOM)------|
                            |                                                                           |
                            |                                                                           |
                            |                                                                           |
                            v                                                                           |
                        Load CSS ------------->Parse CSS --------------> CSS Object Model(CSSOM)--------|
                                        |                                                               |
                                        1. Resolve conflicting CSS declaration(cascade)                 |
                                        2. Process final CSS values                                     |
                                                                                                        |
Final rendered<--------- Website rendering:       <----------------------Render Tree <------------------|
website              the visual formatting model



The CASCADE in CSS
Process of combining different stylesheets and resolving conflicts between different CSS rules and 
declarations, when more than one rule applies to a certain element

- Author declaration
- User
- Browser declaration(user agent)

TO RESOLVE CONFLICTS
importance(weight)                                        >            specificity                                   >              source order
1. User !important declaration            same                  1. inline styles
2. Author !important declaration        importance?             2. IDs
3. Author declaration------------------------------------->     3. classes, pseudo-classes, attribute ---------------->
4. User declaration                                             4. elements, pseudo-elements
5. Default browser declarations

-----------------------------------------------------------------------------------------------------------------------------
Example
.button {
    font-size: 20px;
    color: white;
    background-color: blue !important; ----> This will be applied because of !important
}

#nav.pull-right .button{
    background-color: green;
}

-------------------------------------------------------------------------------------------------------------------------------
.button {                                           Inline
    font-size: 20px;
    color: white;                 
    background-color: blue
}

#nav.pull-right .button {                           IDs
    background-color: green;
}

a {                                                 Classes
  background-color: purple;  
}

#nav a.button: hover {                              Elements
    background-color: yellow;  
}

------------------------------------------------------------------------------------------------------------------------------